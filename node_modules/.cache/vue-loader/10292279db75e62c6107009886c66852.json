{"remainingRequest":"/Users/gilang/Documents/LOCALHOST/frontend-test/tbb/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gilang/Documents/LOCALHOST/frontend-test/tbb/src/components/input/input.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/gilang/Documents/LOCALHOST/frontend-test/tbb/src/components/input/input.vue","mtime":1570609368692},{"path":"/Users/gilang/Documents/LOCALHOST/frontend-test/tbb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gilang/Documents/LOCALHOST/frontend-test/tbb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/gilang/Documents/LOCALHOST/frontend-test/tbb/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/gilang/Documents/LOCALHOST/frontend-test/tbb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gilang/Documents/LOCALHOST/frontend-test/tbb/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\nimport { Component, Vue, Prop, Watch } from \"vue-property-decorator\";\n\n@Component({})\nexport default class Input extends Vue {\n  @Prop({ default: \"text\" })\n  public type: string;\n\n  @Prop({ default: \"\" })\n  public value: any;\n\n  @Prop({ default: \"\" })\n  public placeholder: string;\n\n  private localValue: any;\n\n  @Watch(\"value\")\n  watchValue(oldval: any, newval: any) {\n    this.localValue = newval;\n  }\n}\n",{"version":3,"sources":["input.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA","file":"input.vue","sourceRoot":"src/components/input","sourcesContent":["<template>\n  <div class=\"input\">\n    <input class=\"input__field\" :value=\"localValue\" :type=\"type\" :placeholder=\"placeholder\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Prop, Watch } from \"vue-property-decorator\";\n\n@Component({})\nexport default class Input extends Vue {\n  @Prop({ default: \"text\" })\n  public type: string;\n\n  @Prop({ default: \"\" })\n  public value: any;\n\n  @Prop({ default: \"\" })\n  public placeholder: string;\n\n  private localValue: any;\n\n  @Watch(\"value\")\n  watchValue(oldval: any, newval: any) {\n    this.localValue = newval;\n  }\n}\n</script>\n"]}]}